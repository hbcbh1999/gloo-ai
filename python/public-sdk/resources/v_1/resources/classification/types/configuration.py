# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ......core.datetime_utils import serialize_datetime


class Configuration(pydantic.BaseModel):
    id: str = pydantic.Field(
        description=(
            "The ID of the config to use for the prediction. To use the default, the value should be null or 'default'. To use none, the value should be 'none'.\n"
        )
    )
    version: int = pydantic.Field(
        description=(
            "The version of the config to use for the prediction. To use the latest, the value should be '-1'.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
