# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ......core.datetime_utils import serialize_datetime
from .configuration import Configuration


class PredictionRequest(pydantic.BaseModel):
    llm_target: typing.Optional[str] = pydantic.Field(
        description=(
            "The associated API key that you registered to use for any LLM calls. Use target 'gloo' to use the trial version.\n"
        )
    )
    text: str = pydantic.Field(description=("The text to classify\n"))
    tags: typing.Optional[typing.List[str]] = pydantic.Field(
        description=(
            "The tags to label this input with. This is useful if you have test data that you want to label, or to distinguish between production and test data.\n"
        )
    )
    configuration: typing.Optional[Configuration] = pydantic.Field(
        description=("Overrides for the prediction. If not provided, the default configuration will be used.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
