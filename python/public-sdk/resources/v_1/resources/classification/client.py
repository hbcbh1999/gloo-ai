# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from .....core.api_error import ApiError
from .....core.jsonable_encoder import jsonable_encoder
from .....core.remove_none_from_headers import remove_none_from_headers
from .....environment import GlooApiEnvironment
from .types.prediction_request import PredictionRequest
from .types.prediction_response import PredictionResponse


class ClassificationClient:
    def __init__(
        self,
        *,
        environment: GlooApiEnvironment = GlooApiEnvironment.PRODUCTION,
        x_gloo_tag: typing.Optional[str] = None,
        x_gloo_org: typing.Optional[str] = None,
        token: str,
    ):
        self._environment = environment
        self.x_gloo_tag = x_gloo_tag
        self.x_gloo_org = x_gloo_org
        self._token = token

    def predict(self, classifier_id: str, *, request: PredictionRequest) -> PredictionResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v1/classification/{classifier_id}/predict"),
            json=jsonable_encoder(request),
            headers=remove_none_from_headers(
                {
                    "X-Gloo-Tag": self.x_gloo_tag,
                    "X-Gloo-Org": self.x_gloo_org,
                    "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PredictionResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncClassificationClient:
    def __init__(
        self,
        *,
        environment: GlooApiEnvironment = GlooApiEnvironment.PRODUCTION,
        x_gloo_tag: typing.Optional[str] = None,
        x_gloo_org: typing.Optional[str] = None,
        token: str,
    ):
        self._environment = environment
        self.x_gloo_tag = x_gloo_tag
        self.x_gloo_org = x_gloo_org
        self._token = token

    async def predict(self, classifier_id: str, *, request: PredictionRequest) -> PredictionResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", f"v1/classification/{classifier_id}/predict"),
                json=jsonable_encoder(request),
                headers=remove_none_from_headers(
                    {
                        "X-Gloo-Tag": self.x_gloo_tag,
                        "X-Gloo-Org": self.x_gloo_org,
                        "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PredictionResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
