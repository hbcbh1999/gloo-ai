/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as GlooApi from "../../../../..";
import express from "express";
export interface ClassificationServiceMethods {
    predict(req: express.Request<{
        classifier_id: string;
    }, GlooApi.v1.PredictionResponse, GlooApi.v1.PredictionRequest, never>, res: {
        send: (responseBody: GlooApi.v1.PredictionResponse) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    predictInternal(req: express.Request<{
        classifier_id: string;
    }, GlooApi.v1.InternalPredictResponse, GlooApi.v1.InternalPredictRequest, never>, res: {
        send: (responseBody: GlooApi.v1.InternalPredictResponse) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    feedback(req: express.Request<{
        classifier_id: string;
    }, never, GlooApi.v1.ClassificationFeedbackRequest, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    generateTextInternal(req: express.Request<{
        classifier_id: string;
    }, GlooApi.v1.InternalGenerateTextResponse, GlooApi.v1.InternalGenerateTextRequest, never>, res: {
        send: (responseBody: GlooApi.v1.InternalGenerateTextResponse) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class ClassificationService {
    private readonly methods;
    private router;
    constructor(methods: ClassificationServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
